<% layout('/layouts/boilerplate') %>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<style>
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 20px;
        background-color: #f8f9fa;
    }

    h2 {
        color: #343a40;
    }

    .container {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 20px;
    }

    .chart-container, .form-container {
        width: 100%;
        max-width: 900px;
    }

    .chart-container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        background: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .form-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
        gap: 20px;
        background: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .form-container form {
        display: flex;
        flex-direction: column;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        background-color: #fff;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        margin-top: 20px;
    }

    th, td {
        padding: 12px 15px;
        border: 1px solid #ddd;
        text-align: left;
    }

    th {
        background-color: #f4f4f4;
    }

    td {
        background-color: #fff;
    }

    .btn {
        padding: 10px 20px;
        font-size: 16px;
        color: #fff;
        background-color: #343a40;
        border: none;
        border-radius: 4px;
        text-align: center;
        cursor: pointer;
    }

    .btn:hover {
        background-color: #495057;
    }

    label {
        margin-bottom: 5px;
        font-weight: bold;
    }

    input[type="date"], input[type="month"], input[type="number"] {
        width: 100%;
        padding: 8px;
        margin-bottom: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    @media (max-width: 768px) {
        .chart-container, .form-container {
            width: 100%;
        }

        table {
            display: block;
            overflow-x: auto;
        }
    }
</style>

<script>
    const campaign = <%- JSON.stringify(campaign) %>;
</script>

<body>
    <div class="container">
        <div class="chart-container">
            <h2>Campaign Data</h2>
            <canvas id="myChart"></canvas>
        </div>

        <div class="form-container">
            <% let token; %>
          

            <form method="get" action="/MailMetrics/campaigns/analyseByDate/<%= campaign._id %>">
                <label for="customDate">Select a Date:</label>
                <input type="date" id="token" name="token">
                <button type="submit" class="btn">Analyse</button>
            </form>

            <form method="get" action="/MailMetrics/campaigns/analyseByDateInMonth/<%= campaign._id %>">
                <label for="customMonth">Select a Month:</label>
                <input type="month" id="token" name="token">
                <button type="submit" class="btn">Analyse</button>
            </form>

            <form method="get" action="/MailMetrics/campaigns/analyseByMonth/<%= campaign._id %>">
                <label for="customYear">Select a Year:</label>
                <input type="number" id="token" name="token" min="1000" max="3000">
                <button type="submit" class="btn">Analyse</button>
            </form>

            <form method="get" action="/MailMetrics/campaigns/analyseByDate/<%= campaign._id %>">
                <% token = new Date().getFullYear() + '-' + (new Date().getMonth() + 1).toString().padStart(2, '0') + '-' + new Date().getDate().toString().padStart(2, '0'); %>
                <input type="hidden" name="token" value="<%= token %>">
                <button class="btn">Today Data</button>
            </form>

            <form method="get" action="/MailMetrics/campaigns/analyseByDate/<%= campaign._id %>">
                <% const today = new Date(); const yesterday = new Date(today); yesterday.setDate(today.getDate() - 1); %>
                <% token = yesterday.getFullYear() + '-' + (yesterday.getMonth() + 1).toString().padStart(2, '0') + '-' + yesterday.getDate().toString().padStart(2, '0'); %>
                <input type="hidden" name="token" value="<%= token %>">
                <button class="btn">Yesterday Data</button>
            </form>
        </div>

        <h1>Receiver List</h1>
        <table>
            <thead>
                <tr>
                    <th>S.No.</th>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Age</th>
                    <th>Sends</th>
                    <th>Views</th>
                    <th>Clicks</th>
                </tr>
            </thead>
            <tbody>
                <% let Sno = 0; %>
                <% let total = []; for (let rec of subscriberIds) { if (!total.includes(rec)) { total.push(rec) } } %>
                <tr>
                    <td>Total: <b><%= total.length %></b></td>
                    <td></td>
                    <td>Total</td>
                    <td>====></td>
                    <td><%= campaign.receiver.length %></td>
                    <td><%= campaign.data.views.length %></td>
                    <td><%= campaign.data.clicks.length %></td>
                </tr>
                <% let done = []; let i = -1; %>
                <% for (subscriber of subscriberIds) { i++; if (!done.includes(subscriber)) { done.push(subscriber); Sno = Sno + 1; %>
                <tr>
                    <td><%= Sno %></td>
                    <% if (typeof subscriber.email !== undefined) { %>
                    <td><%= campaign.receiver[i].username %></td>
                    <td><%= campaign.receiver[i].email %></td>
                    <td><%= campaign.receiver[i].age %></td>
                    <% } else { %>
                    <td>Unsubscribed/Deleted</td>
                    <td>Unsubscribed/Deleted</td>
                    <td>Unsubscribed/Deleted</td>
                    <% } %>
                    <td><%= count.countOccurrences(subscriberIds, subscriber, 'receiver') %></td>
                    <td><%= count.countOccurrences(campaign.data.views, subscriber, 'views') %></td>
                    <td><%= count.countOccurrences(campaign.data.clicks, subscriber, 'clicks') %></td>
                </tr>
                <% } %>
                <% } %>
            </tbody>
        </table>
    </div>
<script>
  
    function renderChart(data) {
        var ctx = document.getElementById('myChart').getContext('2d');
        
        // Define an array of colors for each dataset
        var colors = [
            'rgba(255, 99, 132, 0.2)', // For Send Email
            'rgba(54, 162, 235, 0.2)', // For Views
            'rgba(255, 206, 86, 0.2)'  // For Clicks
        ];
        
        var myChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ['Total Send Email', 'Total Views', 'Total Clicks'],
                datasets: [
                    {
                        label: 'Receiver',
                        data: [campaign.receiver.length, 0, 0], // Default data for Receiver (count only for Receiver)
                        backgroundColor: colors[0], // Use color for Receiver
                        borderColor: colors[0].replace('0.2', '1'), // Use darker shade for border
                        borderWidth: 1
                    },
                    {
                        label: 'Views',
                        data: [0, campaign.data.views.length, 0], // Default data for Views (count only for Views)
                        backgroundColor: colors[1], // Use color for Views
                        borderColor: colors[1].replace('0.2', '1'), // Use darker shade for border
                        borderWidth: 1
                    },
                    {
                        label: 'Clicks',
                        data: [0, 0, campaign.data.clicks.length], // Default data for Clicks (count only for Clicks)
                        backgroundColor: colors[2], // Use color for Clicks
                        borderColor: colors[2].replace('0.2', '1'), // Use darker shade for border
                        borderWidth: 1
                    }
                ]
            },
            options: {
                scales: {
                    x: {
                        autoSkip: true,
                        maxRotation: 90,
                        minRotation: 90
                    },
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    }

    // Render chart with dynamic data passed from the server
    renderChart(<%- JSON.stringify(campaign) %>);
</script>
</body>
